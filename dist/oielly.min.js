/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/blog/list.js":
/*!****************************!*\
  !*** ./build/blog/list.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


var list = function list(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.blogURL
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/blog/profile.js":
/*!*******************************!*\
  !*** ./build/blog/profile.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.profile = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var profile = function profile(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.blogURL + '/profile/' + properties.postId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.profile = profile;

/***/ }),

/***/ "./build/client/create.js":
/*!********************************!*\
  !*** ./build/client/create.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.clientURL,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/client/list.js":
/*!******************************!*\
  !*** ./build/client/list.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var list = function list(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.clientURL
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/client/profile.js":
/*!*********************************!*\
  !*** ./build/client/profile.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.profile = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var profile = function profile(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.clientURL + '/' + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.profile = profile;

/***/ }),

/***/ "./build/client/query.js":
/*!*******************************!*\
  !*** ./build/client/query.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.query = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var query = function query(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.clientQueryURL + "?clientId=" + properties.clientId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.query = query;

/***/ }),

/***/ "./build/client/remove.js":
/*!********************************!*\
  !*** ./build/client/remove.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.remove = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var remove = function remove(properties) {
  broadcast_1["default"]({
    method: 'DELETE',
    url: constant_1.clientURL + "/" + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.remove = remove;

/***/ }),

/***/ "./build/client/update.js":
/*!********************************!*\
  !*** ./build/client/update.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.update = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var update = function update(properties) {
  broadcast_1["default"]({
    method: 'PATCH',
    url: constant_1.clientURL + "/" + properties.referenceId,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.update = update;

/***/ }),

/***/ "./build/contact/create.js":
/*!*********************************!*\
  !*** ./build/contact/create.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.contactURL,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/contact/list.js":
/*!*******************************!*\
  !*** ./build/contact/list.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var list = function list(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.contactURL
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/guest/create.js":
/*!*******************************!*\
  !*** ./build/guest/create.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.guestURL,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/guest/list.js":
/*!*****************************!*\
  !*** ./build/guest/list.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var list = function list(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.guestURL
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/guest/login.js":
/*!******************************!*\
  !*** ./build/guest/login.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.login = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var login = function login(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.guestURL + '/login',
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.login = login;

/***/ }),

/***/ "./build/guest/profile.js":
/*!********************************!*\
  !*** ./build/guest/profile.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.profile = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var profile = function profile(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.guestURL + '/' + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.profile = profile;

/***/ }),

/***/ "./build/guest/remove.js":
/*!*******************************!*\
  !*** ./build/guest/remove.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.remove = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var remove = function remove(properties) {
  broadcast_1["default"]({
    method: 'DELETE',
    url: constant_1.guestURL + "/" + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.remove = remove;

/***/ }),

/***/ "./build/guest/update.js":
/*!*******************************!*\
  !*** ./build/guest/update.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.update = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var update = function update(properties) {
  broadcast_1["default"]({
    method: 'PATCH',
    url: constant_1.guestURL + "/" + properties.referenceId,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.update = update;

/***/ }),

/***/ "./build/market/create.js":
/*!********************************!*\
  !*** ./build/market/create.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.marketURL,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/market/list.js":
/*!******************************!*\
  !*** ./build/market/list.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var list = function list(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.marketURL
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/market/profile.js":
/*!*********************************!*\
  !*** ./build/market/profile.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.profile = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var profile = function profile(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.marketURL + '/' + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.profile = profile;

/***/ }),

/***/ "./build/market/query.js":
/*!*******************************!*\
  !*** ./build/market/query.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.query = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var query = function query(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.marketQueryURL + "?marketId=" + properties.marketId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.query = query;

/***/ }),

/***/ "./build/market/remove.js":
/*!********************************!*\
  !*** ./build/market/remove.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.remove = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var remove = function remove(properties) {
  broadcast_1["default"]({
    method: 'DELETE',
    url: constant_1.marketURL + "/" + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.remove = remove;

/***/ }),

/***/ "./build/market/update.js":
/*!********************************!*\
  !*** ./build/market/update.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.update = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var update = function update(properties) {
  broadcast_1["default"]({
    method: 'PATCH',
    url: constant_1.marketURL + "/" + properties.referenceId,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.update = update;

/***/ }),

/***/ "./build/order/create.js":
/*!*******************************!*\
  !*** ./build/order/create.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.orderURL,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/order/list.js":
/*!*****************************!*\
  !*** ./build/order/list.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var list = function list(properties) {
  var newUrl = properties.status ? constant_1.orderURL + "?status=" + properties.status : constant_1.orderURL;
  broadcast_1["default"]({
    method: 'GET',
    url: newUrl
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/order/profile.js":
/*!********************************!*\
  !*** ./build/order/profile.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.profile = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var profile = function profile(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.orderURL + '/' + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.profile = profile;

/***/ }),

/***/ "./build/order/remove.js":
/*!*******************************!*\
  !*** ./build/order/remove.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.remove = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var remove = function remove(properties) {
  broadcast_1["default"]({
    method: 'DELETE',
    url: constant_1.staffURL + "/" + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.remove = remove;

/***/ }),

/***/ "./build/order/update.js":
/*!*******************************!*\
  !*** ./build/order/update.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.update = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var update = function update(properties) {
  broadcast_1["default"]({
    method: 'PATCH',
    url: constant_1.orderURL + "/" + properties.referenceId,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.update = update;

/***/ }),

/***/ "./build/order/updateStatus.js":
/*!*************************************!*\
  !*** ./build/order/updateStatus.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.update = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var update = function update(properties) {
  broadcast_1["default"]({
    method: 'PATCH',
    url: constant_1.orderURL + "/status/" + properties.referenceId,
    data: properties.status
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.update = update;

/***/ }),

/***/ "./build/product/create.js":
/*!*********************************!*\
  !*** ./build/product/create.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  var data = properties.data;
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.productURL,
    data: data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create; // interface IData {
// 	materialName: string;
// 	price: string;
// 	quantity: string;
// 	category: string;
// 	tag: string;
// 	description: string;
// 	clientId: string;
// 	marketId: string;
// 	name: string;
// 	personal: any;
// }

/***/ }),

/***/ "./build/product/list.js":
/*!*******************************!*\
  !*** ./build/product/list.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


var list = function list(properties) {
  var newUrl = properties.category ? constant_1.productURL + '?category=' + properties.category : constant_1.productURL;
  broadcast_1["default"]({
    method: 'GET',
    url: newUrl
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/product/profile.js":
/*!**********************************!*\
  !*** ./build/product/profile.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.profile = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


var profile = function profile(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.productURL + '/' + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.profile = profile;

/***/ }),

/***/ "./build/product/query.js":
/*!********************************!*\
  !*** ./build/product/query.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.profile = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var profile = function profile(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.productQueryURL + "?productId=" + properties.productId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.profile = profile;

/***/ }),

/***/ "./build/product/remove.js":
/*!*********************************!*\
  !*** ./build/product/remove.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.remove = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var remove = function remove(properties) {
  broadcast_1["default"]({
    method: 'DELETE',
    url: constant_1.productURL + "/" + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.remove = remove;

/***/ }),

/***/ "./build/product/update.js":
/*!*********************************!*\
  !*** ./build/product/update.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.update = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var update = function update(properties) {
  broadcast_1["default"]({
    method: 'PATCH',
    url: constant_1.staffURL + "/" + properties.referenceId,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.update = update;

/***/ }),

/***/ "./build/review/create.js":
/*!********************************!*\
  !*** ./build/review/create.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.reviewURL,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/review/list.js":
/*!******************************!*\
  !*** ./build/review/list.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var list = function list(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.reviewURL
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/selection/create.js":
/*!***********************************!*\
  !*** ./build/selection/create.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.selectionUrl,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/selection/list.js":
/*!*********************************!*\
  !*** ./build/selection/list.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var list = function list(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.selectionUrl
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/staff/create.js":
/*!*******************************!*\
  !*** ./build/staff/create.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.staffURL,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/staff/list.js":
/*!*****************************!*\
  !*** ./build/staff/list.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the staff
 * @param {Function} properties.response - Callback to get the error or success message
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types


var list = function list(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.staffURL
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/staff/profile.js":
/*!********************************!*\
  !*** ./build/staff/profile.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.profile = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var profile = function profile(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.staffURL + '/' + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.profile = profile;

/***/ }),

/***/ "./build/staff/remove.js":
/*!*******************************!*\
  !*** ./build/staff/remove.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.remove = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var remove = function remove(properties) {
  broadcast_1["default"]({
    method: 'DELETE',
    url: constant_1.staffURL + "/" + properties.referenceId
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.remove = remove;

/***/ }),

/***/ "./build/staff/update.js":
/*!*******************************!*\
  !*** ./build/staff/update.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.update = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var update = function update(properties) {
  broadcast_1["default"]({
    method: 'PATCH',
    url: constant_1.staffURL + "/" + properties.referenceId,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.update = update;

/***/ }),

/***/ "./build/subscribe/create.js":
/*!***********************************!*\
  !*** ./build/subscribe/create.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.subscribeUrl,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/subscribe/list.js":
/*!*********************************!*\
  !*** ./build/subscribe/list.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.list = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var list = function list(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.subscribeUrl
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.list = list;

/***/ }),

/***/ "./build/util/broadcast.js":
/*!*********************************!*\
  !*** ./build/util/broadcast.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = this && this.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/index.js"));

var broadcast = function broadcast(config, _callback) {
  return __awaiter(void 0, void 0, void 0, function () {
    var token, axiosConfig;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          token = 'token';
          axiosConfig = {
            url: config.url,
            headers: {
              Authorization: "Basic " + token
            },
            method: config.method,
            data: config.data
          };
          return [4
          /*yield*/
          , axios_1["default"](axiosConfig)];

        case 1:
          return [2
          /*return*/
          , _a.sent()];
      }
    });
  });
};

exports.default = broadcast;

/***/ }),

/***/ "./build/util/constant.js":
/*!********************************!*\
  !*** ./build/util/constant.js ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.marketQueryURL = exports.productQueryURL = exports.clientQueryURL = exports.transactionURL = exports.blogURL = exports.selectionUrl = exports.contactURL = exports.reviewURL = exports.subscribeUrl = exports.productURL = exports.marketURL = exports.orderURL = exports.guestURL = exports.clientURL = exports.staffURL = exports.baseURL = void 0;
exports.baseURL =  false ? 0 : 'http://192.168.43.146:1337';
exports.staffURL = exports.baseURL + "/api/entries/staff";
exports.clientURL = exports.baseURL + "/api/entries/client";
exports.guestURL = exports.baseURL + "/api/entries/guest";
exports.orderURL = exports.baseURL + "/api/order";
exports.marketURL = exports.baseURL + "/api/market/material";
exports.productURL = exports.baseURL + "/api/product/material";
exports.subscribeUrl = exports.baseURL + "/api/subscribe";
exports.reviewURL = exports.baseURL + "/api/review";
exports.contactURL = exports.baseURL + "/api/contact";
exports.selectionUrl = exports.baseURL + "/api/selection";
exports.blogURL = exports.baseURL + "/api/blog/post";
exports.transactionURL = exports.baseURL + "/api/wallet/transaction"; // Query

exports.clientQueryURL = exports.baseURL + "/api/entries/client/query/id";
exports.productQueryURL = exports.baseURL + "/api/product/material/query/id";
exports.marketQueryURL = exports.baseURL + "/api/market/material/query/id";

/***/ }),

/***/ "./build/wallet/create.js":
/*!********************************!*\
  !*** ./build/wallet/create.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.create = void 0;

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var create = function create(properties) {
  broadcast_1["default"]({
    method: 'POST',
    url: constant_1.transactionURL,
    data: properties.data
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.create = create;

/***/ }),

/***/ "./build/wallet/verify.js":
/*!********************************!*\
  !*** ./build/wallet/verify.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.verify = void 0;

var constant_1 = __webpack_require__(/*! ../util/constant */ "./build/util/constant.js");

var broadcast_1 = __importDefault(__webpack_require__(/*! ../util/broadcast */ "./build/util/broadcast.js"));
/**
 * A View displays all available user or individual user.
 *
 * @method view
 * @param {Object} properties - The message.
 * @param {String} properties.userId - This sets the Id of the user
 * @param {Function} properties.response - Callback to get the error or success message
 */


var verify = function verify(properties) {
  broadcast_1["default"]({
    method: 'GET',
    url: constant_1.transactionURL + '/verify/' + properties.reference
  }).then(function (success) {
    return properties.response(success.data, null);
  })["catch"](function (error) {
    return properties.response(null, error);
  });
};

exports.verify = verify;

/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");

var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");

var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");

var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");

var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");

var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest(); // HTTP basic authentication

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

    request.timeout = config.timeout; // Listen for ready state

    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      } // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request


      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      } // Prepare the response


      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(resolve, reject, response); // Clean up request

      request = null;
    }; // Handle browser request cancellation (as opposed to a manual cancellation)


    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Handle low level network errors


    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request)); // Clean up request

      request = null;
    }; // Handle timeout


    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';

      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }

      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request)); // Clean up request

      request = null;
    }; // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.


    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    } // Add headers to the request


    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    } // Add withCredentials to request if needed


    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    } // Add responseType to request if needed


    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    } // Handle progress if needed


    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    } // Not all browsers support upload events


    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel); // Clean up request

        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    } // Send the request


    request.send(requestData);
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");

var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");

var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */


function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

  utils.extend(instance, Axios.prototype, context); // Copy context to instance

  utils.extend(instance, context);
  return instance;
} // Create the default instance to be exported


var axios = createInstance(defaults); // Expose Axios class to allow class inheritance

axios.Axios = Axios; // Factory for creating new instances

axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
}; // Expose Cancel & CancelToken


axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js"); // Expose all/spread

axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js"); // Expose isAxiosError

axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");
module.exports = axios; // Allow use of default import syntax in TypeScript

module.exports.default = axios;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */


function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */


CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");

var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");

var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");

var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */


function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */


Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config); // Set config.method

  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  } // Hook up interceptors middleware


  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
}; // Provide aliases for supported request methods


utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});
module.exports = Axios;

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */


InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */


InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */


InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");

var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */


module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }

  return requestedURL;
};

/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */


module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");

var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");
/**
 * Throws a `Cancel` if cancellation has been requested.
 */


function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */


module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config); // Ensure headers exist

  config.headers = config.headers || {}; // Transform request data

  config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config); // Transform response data

    response.data = transformData(response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config); // Transform response data

      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;

  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };

  return error;
};

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */


module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};
  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = ['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress', 'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }

    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });
  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });
  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });
  var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
  var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
    return axiosKeys.indexOf(key) === -1;
  });
  utils.forEach(otherKeys, mergeDeepProperties);
  return config;
};

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */


module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;

  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */


module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });
  return data;
};

/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");

var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;

  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }

  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }

    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }

    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }

    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }

    return data;
  }],
  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {
        /* Ignore */
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};
defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    return fn.apply(thisArg, args);
  };
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */


module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;

  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }

        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function isAxiosError(payload) {
  return _typeof(payload) === 'object' && payload.isAxiosError === true;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;
  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);
  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js"); // Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers


var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }

      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
/*global toString:true*/
// utils is a library of generic helper functions non-specific to axios


var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

function isArray(val) {
  return toString.call(val) === '[object Array]';
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */


function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */


function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */


function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */


function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */


function isArrayBufferView(val) {
  var result;

  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }

  return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */


function isString(val) {
  return typeof val === 'string';
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */


function isNumber(val) {
  return typeof val === 'number';
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */


function isObject(val) {
  return val !== null && _typeof(val) === 'object';
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */


function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */


function isDate(val) {
  return toString.call(val) === '[object Date]';
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */


function isFile(val) {
  return toString.call(val) === '[object File]';
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */


function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */


function isFunction(val) {
  return toString.call(val) === '[object Function]';
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */


function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */


function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */


function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */


function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }

  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */


function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  } // Force an array if not already something iterable


  if (_typeof(obj) !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */


function merge()
/* obj1, obj2, obj3, ... */
{
  var result = {};

  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }

  return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */


function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */


function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }

  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./build/app.js ***!
  \**********************/


Object.defineProperty(exports, "__esModule", ({
  value: true
}));

var list_1 = __webpack_require__(/*! ./staff/list */ "./build/staff/list.js");

var profile_1 = __webpack_require__(/*! ./staff/profile */ "./build/staff/profile.js");

var create_1 = __webpack_require__(/*! ./staff/create */ "./build/staff/create.js");

var update_1 = __webpack_require__(/*! ./staff/update */ "./build/staff/update.js");

var remove_1 = __webpack_require__(/*! ./staff/remove */ "./build/staff/remove.js");

var list_2 = __webpack_require__(/*! ./client/list */ "./build/client/list.js");

var profile_2 = __webpack_require__(/*! ./client/profile */ "./build/client/profile.js");

var query_1 = __webpack_require__(/*! ./client/query */ "./build/client/query.js");

var create_2 = __webpack_require__(/*! ./client/create */ "./build/client/create.js");

var update_2 = __webpack_require__(/*! ./client/update */ "./build/client/update.js");

var remove_2 = __webpack_require__(/*! ./client/remove */ "./build/client/remove.js");

var list_3 = __webpack_require__(/*! ./guest/list */ "./build/guest/list.js");

var profile_3 = __webpack_require__(/*! ./guest/profile */ "./build/guest/profile.js");

var login_1 = __webpack_require__(/*! ./guest/login */ "./build/guest/login.js");

var create_3 = __webpack_require__(/*! ./guest/create */ "./build/guest/create.js");

var update_3 = __webpack_require__(/*! ./guest/update */ "./build/guest/update.js");

var remove_3 = __webpack_require__(/*! ./guest/remove */ "./build/guest/remove.js");

var list_4 = __webpack_require__(/*! ./market/list */ "./build/market/list.js");

var profile_4 = __webpack_require__(/*! ./market/profile */ "./build/market/profile.js");

var query_2 = __webpack_require__(/*! ./market/query */ "./build/market/query.js");

var create_4 = __webpack_require__(/*! ./market/create */ "./build/market/create.js");

var update_4 = __webpack_require__(/*! ./market/update */ "./build/market/update.js");

var remove_4 = __webpack_require__(/*! ./market/remove */ "./build/market/remove.js");

var list_5 = __webpack_require__(/*! ./product/list */ "./build/product/list.js");

var profile_5 = __webpack_require__(/*! ./product/profile */ "./build/product/profile.js");

var query_3 = __webpack_require__(/*! ./product/query */ "./build/product/query.js");

var create_5 = __webpack_require__(/*! ./product/create */ "./build/product/create.js");

var update_5 = __webpack_require__(/*! ./product/update */ "./build/product/update.js");

var remove_5 = __webpack_require__(/*! ./product/remove */ "./build/product/remove.js");

var list_6 = __webpack_require__(/*! ./order/list */ "./build/order/list.js");

var profile_6 = __webpack_require__(/*! ./order/profile */ "./build/order/profile.js");

var create_6 = __webpack_require__(/*! ./order/create */ "./build/order/create.js");

var update_6 = __webpack_require__(/*! ./order/update */ "./build/order/update.js");

var updateStatus_1 = __webpack_require__(/*! ./order/updateStatus */ "./build/order/updateStatus.js");

var remove_6 = __webpack_require__(/*! ./order/remove */ "./build/order/remove.js");

var list_7 = __webpack_require__(/*! ./subscribe/list */ "./build/subscribe/list.js");

var create_7 = __webpack_require__(/*! ./subscribe/create */ "./build/subscribe/create.js");

var list_8 = __webpack_require__(/*! ./review/list */ "./build/review/list.js");

var create_8 = __webpack_require__(/*! ./review/create */ "./build/review/create.js");

var list_9 = __webpack_require__(/*! ./contact/list */ "./build/contact/list.js");

var create_9 = __webpack_require__(/*! ./contact/create */ "./build/contact/create.js");

var list_10 = __webpack_require__(/*! ./selection/list */ "./build/selection/list.js");

var create_10 = __webpack_require__(/*! ./selection/create */ "./build/selection/create.js");

var list_11 = __webpack_require__(/*! ./blog/list */ "./build/blog/list.js");

var profile_7 = __webpack_require__(/*! ./blog/profile */ "./build/blog/profile.js");

var create_11 = __webpack_require__(/*! ./wallet/create */ "./build/wallet/create.js");

var verify_1 = __webpack_require__(/*! ./wallet/verify */ "./build/wallet/verify.js");

var oielly = {
  staff: {
    list: list_1.list,
    profile: profile_1.profile,
    create: create_1.create,
    update: update_1.update,
    remove: remove_1.remove
  },
  client: {
    list: list_2.list,
    profile: profile_2.profile,
    query: query_1.query,
    create: create_2.create,
    update: update_2.update,
    remove: remove_2.remove
  },
  guest: {
    list: list_3.list,
    profile: profile_3.profile,
    create: create_3.create,
    update: update_3.update,
    remove: remove_3.remove,
    login: login_1.login
  },
  market: {
    list: list_4.list,
    profile: profile_4.profile,
    query: query_2.query,
    create: create_4.create,
    update: update_4.update,
    remove: remove_4.remove
  },
  product: {
    list: list_5.list,
    profile: profile_5.profile,
    query: query_3.profile,
    create: create_5.create,
    update: update_5.update,
    remove: remove_5.remove
  },
  order: {
    list: list_6.list,
    profile: profile_6.profile,
    create: create_6.create,
    update: update_6.update,
    updateStatus: updateStatus_1.update,
    remove: remove_6.remove
  },
  subscribe: {
    list: list_7.list,
    create: create_7.create
  },
  review: {
    list: list_8.list,
    create: create_8.create
  },
  selection: {
    list: list_10.list,
    create: create_10.create
  },
  contact: {
    list: list_9.list,
    create: create_9.create
  },
  blog: {
    list: list_11.list,
    profile: profile_7.profile
  },
  wallet: {
    create: create_11.create,
    verify: verify_1.verify
  }
}; // if(window){
// 	window['oielly'] = oielly;
// }

exports.default = oielly;
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,